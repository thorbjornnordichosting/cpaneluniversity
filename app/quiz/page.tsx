'use client'

import { useState } from 'react'
import Link from 'next/link'

interface Question {
  id: number
  question: string
  answers: string[]
  correctAnswer: number
  explanation: string
  example: string
}

const questions: Question[] = [
  {
    id: 1,
    question: "F√∂r vilket av dessa system erbjuder LiteSpeed INTE en officiell LSCache plugin?",
    answers: [
      "Magento",
      "WordPress",
      "OctoberCMS",
      "Joomla"
    ],
    correctAnswer: 2,
    explanation: "LiteSpeed erbjuder officiella LSCache plugins f√∂r WordPress, Magento och Joomla, men INTE f√∂r OctoberCMS. Dessa plugins optimerar prestandan genom att cacha sidor p√• serverniv√• direkt i webbservern, vilket √§r mycket snabbare √§n vanlig PHP-cache.",
    example: `VERKLIGT SCENARIO - E-handelssajt med 50,000 bes√∂kare/dag:

üè™ F√ñRE (WordPress utan LSCache):
‚Ä¢ Server: 4 CPU cores, 8GB RAM
‚Ä¢ Laddningstid: 3-4 sekunder per sida
‚Ä¢ Servern krashade vid kampanjer (Black Friday)
‚Ä¢ Kostnad: 150‚Ç¨/m√•nad f√∂r VPS

‚ö° EFTER (WordPress MED LSCache):
‚Ä¢ SAMMA server: 4 CPU cores, 8GB RAM  
‚Ä¢ Laddningstid: 0.3 sekunder (10x snabbare!)
‚Ä¢ Hanterar 200,000 bes√∂kare utan problem
‚Ä¢ Kostnad: fortfarande 150‚Ç¨/m√•nad

üéØ KONKRET EXEMPEL:
Produktsida "iPhone 15" bes√∂ks 1000 g√•nger/timme
‚Ä¢ Utan cache = 1000 databas-queries
‚Ä¢ Med LSCache = 1 databas-query
‚Ä¢ Sparar 999 on√∂diga databasanrop!

üí∞ RESULTAT:
‚Ä¢ 95% mindre server-belastning
‚Ä¢ 10x snabbare f√∂r kunder
‚Ä¢ Google PageSpeed: 45 ‚Üí 95
‚Ä¢ 30% fler f√∂rs√§ljningar!

‚ùå MED OctoberCMS:
M√•ste manuellt konfigurera Varnish/Redis
Ingen "one-click" l√∂sning.`
  },
  {
    id: 2,
    question: "Vilken typ av arkitektur anv√§nder LiteSpeed?",
    answers: [
      "Process-driven Architecture",
      "Bovine-driven Architecture",
      "Beer-driven Architecture",
      "Event-driven Architecture"
    ],
    correctAnswer: 3,
    explanation: "LiteSpeed anv√§nder Event-driven Architecture (h√§ndelsedriven arkitektur). Till skillnad fr√•n Apache's process-driven modell, anv√§nder LiteSpeed en asynkron event-loop som kan hantera tusentals samtidiga anslutningar med minimal resursanv√§ndning. Varje worker-process kan hantera m√•nga tusen requests samtidigt genom att v√§xla mellan dem n√§r de v√§ntar p√• I/O operationer.",
    example: `VERKLIGT SCENARIO - E-handelsplattform Black Friday:

üõçÔ∏è F√ñRETAG: "NordicShop.se"
üìä Normal: 2,000 samtidiga anv√§ndare
üéØ Black Friday: 50,000 samtidiga anv√§ndare!

---

üêå APACHE (Process-driven):

Skapar 1 process per anv√§ndare:
‚Ä¢ 10,000 anv√§ndare = 10,000 processer
‚Ä¢ Varje process: ~30MB RAM
‚Ä¢ Totalt: 10,000 √ó 30MB = 300GB RAM
‚Ä¢ Server har bara 32GB...
‚Ä¢ Resultat: üí• KRASCH!

‚ö° LITESPEED (Event-driven):

Anv√§nder fast 8 worker-processer:
‚Ä¢ 10,000 anv√§ndare = fortfarande 8 processer!
‚Ä¢ Varje process: ~60MB RAM
‚Ä¢ Totalt: 8 √ó 60MB = 480MB RAM
‚Ä¢ Server har 32GB (anv√§nder bara 1.5%!)
‚Ä¢ Resultat: ‚úÖ FUNGERAR PERFEKT!

---

üìä BLACK FRIDAY RESULTAT:

Apache:
‚Ä¢ 00:03 - F√∂rsta servern kraschar
‚Ä¢ 00:07 - Alla servrar nere
‚Ä¢ Downtime: 2 timmar
‚Ä¢ F√∂rlorad f√∂rs√§ljning: 8 miljoner kr
‚Ä¢ VD fick sparken

LiteSpeed:
‚Ä¢ 00:00-02:00 - Fungerade perfekt hela natten
‚Ä¢ 50,000 samtidiga anv√§ndare - inga problem
‚Ä¢ Downtime: 0 minuter
‚Ä¢ F√∂rs√§ljning: 45 miljoner kr (rekord!)
‚Ä¢ VD fick bonus: 500,000 kr

---

üí° ANALOGI - Restaurang:

üêå Process-driven = 1 kock per g√§st:
‚Ä¢ 100 g√§ster = 100 kockar (kaos!)
‚Ä¢ Kockarna st√•r mest och V√ÑNTAR
‚Ä¢ Sl√∂sar resurser

‚ö° Event-driven = 8 professionella kockar:
‚Ä¢ 100 g√§ster = samma 8 kockar
‚Ä¢ Medan en r√§tt kokar, b√∂rjar kocken med n√§sta
‚Ä¢ Alltid produktiva!

---

SLUTSATS:
Event-driven = 99% mindre RAM
Event-driven = 10-100X fler anv√§ndare
Event-driven = Framtiden!`
  },
  {
    id: 3,
    question: "Vilket p√•st√•ende beskriver b√§st LiteSpeed's st√∂d f√∂r reCAPTCHA?",
    answers: [
      "LiteSpeed st√∂der bara reCAPTCHA n√§r man installerar med reDIS",
      "LiteSpeed st√∂der bara CAPTCHA, inte reCAPTCHA",
      "LiteSpeed st√∂der inte reCAPTCHA",
      "LiteSpeed st√∂der reCAPTCHA"
    ],
    correctAnswer: 3,
    explanation: "LiteSpeed har fullt inbyggt st√∂d f√∂r reCAPTCHA (Google's moderna bot-skydd). Detta √§r integrerat direkt i LiteSpeed och kan anv√§ndas f√∂r att skydda mot DDoS-attacker, spam-bots, och automatiserade attacker. Du kan konfigurera reCAPTCHA direkt i LiteSpeed WebAdmin Console under Security ‚Üí Bot Protection, utan att beh√∂va installera extra plugins eller Redis.",
    example: `VERKLIGT SCENARIO - Webshop mot bot-attack:

üè™ F√ñRETAG: "ModeButiken.se"
üìä Normal trafik: 500 bes√∂kare/timme
ü§ñ ATTACK: 50,000 bot-requests/minut!

---

‚ùå UTAN reCAPTCHA:

10:00 - Bot-attack b√∂rjar
‚Ä¢ CPU: 100% (genererar sidor till bots)
‚Ä¢ Databas: √ñverbelastad
‚Ä¢ Responstid: 30 sekunder
‚Ä¢ Riktiga kunder: Kan inte handla!

10:30 - Fortfarande kaos
‚Ä¢ Bots stj√§l all produktdata
‚Ä¢ Konkurrent f√•r all info
‚Ä¢ Kunder l√§mnar sajten

12:00 - 2 timmar senare
‚Ä¢ F√∂rlorad f√∂rs√§ljning: 100,000 kr
‚Ä¢ Stulen data: All lagerstatus
‚Ä¢ Stressad IT-personal

---

‚úÖ MED LiteSpeed reCAPTCHA:

SETUP (en g√•ng, 8 minuter):
1. Google reCAPTCHA nycklar (gratis!)
2. LiteSpeed WebAdmin port 7080
3. Security ‚Üí Bot Protection ‚Üí reCAPTCHA
4. Klart!

N√ÑR ATTACK KOMMER:

10:00 - Bot-attack b√∂rjar
LiteSpeed uppt√§cker automatiskt!
‚Ä¢ Bots f√•r: reCAPTCHA "Klicka p√• alla bilar"
‚Ä¢ Bots kan inte l√∂sa ‚Üí 99.9% blockerade
‚Ä¢ Server-last fr√•n bots: ~0%

Riktiga kunder:
‚Ä¢ Ingen CAPTCHA (om de beter sig normalt!)
‚Ä¢ Responstid: 0.4 sekunder (normalt!)
‚Ä¢ Kan handla som vanligt

RESULTAT:
‚Ä¢ F√∂rlorad f√∂rs√§ljning: 0 kr
‚Ä¢ Stulen data: 0 (bots kom aldrig in)
‚Ä¢ IT-tid: 0 (automatiskt)
‚Ä¢ Kunder: N√∂jda!

---

üí∞ EKONOMISK KALKYL:

UTAN reCAPTCHA:
‚Ä¢ Bot-attacker: 10/√•r
‚Ä¢ F√∂rlust per attack: 50,000 kr
‚Ä¢ Total: 500,000 kr/√•r

MED LiteSpeed reCAPTCHA:
‚Ä¢ Setup: 8 minuter
‚Ä¢ Kostnad: 0 kr (gratis!)
‚Ä¢ Blockerade attacker: 99.9%
‚Ä¢ Total: 0 kr/√•r

BESPARING: 500,000 kr/√•r!

---

üî¨ reCAPTCHA-VERSIONER:

v2 Checkbox: "Jag √§r inte en robot" ‚òëÔ∏è
‚Ä¢ Synlig f√∂r anv√§ndare
‚Ä¢ Bra f√∂r login

v2 Invisible: K√∂rs i bakgrunden
‚Ä¢ Anv√§ndaren ser inget
‚Ä¢ Bra f√∂r formul√§r

v3: Helt osynlig!
‚Ä¢ Score 0.0-1.0 (bot-sannolikhet)
‚Ä¢ Ingen anv√§ndarinteraktion
‚Ä¢ B√§st f√∂r alla formul√§r

LiteSpeed st√∂der ALLA versioner inbyggt!

---

SAMMANFATTNING:
‚úÖ Inbyggt i LiteSpeed (inga extra plugins!)
‚úÖ Gratis (Google reCAPTCHA)
‚úÖ Blockerar 99.9% av bots
‚úÖ Anv√§ndarv√§nligt (v3 √§r osynlig)
‚úÖ Sparar hundratusentals kronor

Det √§r INTE sant att du beh√∂ver Redis!
LiteSpeed har fullt modernt st√∂d f√∂r reCAPTCHA! üõ°Ô∏è`
  },
  {
    id: 4,
    question: "Vilket p√•st√•ende beskriver b√§st huvudkravet f√∂r att QUIC ska fungera p√• din server?",
    answers: [
      "Du m√•ste se till att port 443 p√• TCP √§r till√•ten in och ut genom brandv√§ggen",
      "Du m√•ste se till att port 443 p√• UDP √§r till√•ten in och ut genom brandv√§ggen",
      "Du m√•ste se till att port 911 p√• TCP √§r till√•ten in och ut genom brandv√§ggen",
      "Du m√•ste se till att port 911 p√• UDP √§r till√•ten in och ut genom brandv√§ggen"
    ],
    correctAnswer: 1,
    explanation: "QUIC (som anv√§nds f√∂r HTTP/3) k√∂r p√• UDP port 443, INTE TCP! Detta √§r en kritisk skillnad fr√•n traditionell HTTP/HTTPS som anv√§nder TCP. Du m√•ste √∂ppna UDP port 443 i brandv√§ggen f√∂r att HTTP/3 ska fungera. M√•nga administrat√∂rer gl√∂mmer detta eftersom de √§r vana vid att bara √∂ppna TCP 443 f√∂r HTTPS.",
    example: `VERKLIGT SCENARIO - Webbhotell aktiverar HTTP/3 men det fungerar inte:

üè¢ F√ñRETAG: "HostNordic AB" i Stockholm
üéØ M√ÖL: Aktivera HTTP/3 f√∂r snabbare mobilupplevelse
ü§î PROBLEM: HTTP/3 fungerar inte trots konfiguration!

---

‚ùå VANLIGT MISSTAG - Gl√∂mmer UDP 443:

M√ÖNDAG 10:00 - Sysadmin "Erik" aktiverar HTTP/3:

1. Loggar in p√• LiteSpeed WebAdmin (port 7080)
2. Server Configuration ‚Üí QUIC
3. Enable QUIC: ‚úì YES
4. QUIC Port: 443
5. Apply ‚Üí Graceful Restart
6. "Klart! HTTP/3 aktiverat!" üéâ

M√ÖNDAG 10:30 - Test fr√•n mobilen:
‚Ä¢ √ñppnar Chrome DevTools
‚Ä¢ Kolla Protocol kolumn
‚Ä¢ F√∂rv√§ntar: "h3" (HTTP/3)
‚Ä¢ Ser: "h2" (HTTP/2) 
‚Ä¢ ü§î "Varf√∂r fungerar inte HTTP/3?"

M√ÖNDAG 11:00 - Fels√∂kning:

ERIK KOLLAR:
‚Ä¢ LiteSpeed config: ‚úÖ QUIC enabled
‚Ä¢ SSL cert: ‚úÖ Fungerar
‚Ä¢ Browser: ‚úÖ Chrome st√∂der HTTP/3
‚Ä¢ Server logs: "QUIC handshake timeout"

ERIK TESTAR:
Terminal: telnet server.se 443
‚úÖ Fungerar (TCP 443 √∂ppen)

Terminal: nc -u server.se 443
‚ùå Connection timeout (UDP 443 ST√ÑNGD!)

üí° AHA-MOMENT:
"Jag gl√∂mde √∂ppna UDP 443 i brandv√§ggen!"

---

‚úÖ R√ÑTT L√ñSNING - √ñppna UDP 443:

BRANDV√ÑGGS-KONFIGURATION:

P√• Linux med firewalld:
firewall-cmd --permanent --add-port=443/udp
firewall-cmd --reload

P√• Linux med iptables:
iptables -A INPUT -p udp --dport 443 -j ACCEPT
iptables -A OUTPUT -p udp --sport 443 -j ACCEPT
iptables-save > /etc/iptables/rules.v4

P√• Linux med ufw:
ufw allow 443/udp

VERIFIERA:
firewall-cmd --list-ports
B√∂r visa: 443/tcp 443/udp

---

M√ÖNDAG 11:30 - Efter fix:

Erik √∂ppnar UDP 443 i brandv√§ggen
Testar igen fr√•n mobilen:
‚Ä¢ Chrome DevTools Protocol: "h3" ‚úÖ
‚Ä¢ HTTP/3 fungerar!
‚Ä¢ Laddningstid mobil: 2.5s ‚Üí 1.2s (52% snabbare!)

---

üî¨ TEKNISK F√ñRKLARING - Varf√∂r UDP?

TRADITIONELL HTTPS (TCP 443):
‚Ä¢ Anv√§nder TCP (Transmission Control Protocol)
‚Ä¢ Garanterad leverans i r√§tt ordning
‚Ä¢ Men: L√•ngsam vid paketf√∂rlust
‚Ä¢ Kr√§ver 3-v√§gs-handskakning

HTTP/3 QUIC (UDP 443):
‚Ä¢ Anv√§nder UDP (User Datagram Protocol)  
‚Ä¢ Snabbare anslutning (0-RTT m√∂jligt)
‚Ä¢ B√§ttre vid paketf√∂rlust
‚Ä¢ Multiplexing utan "head-of-line blocking"

SAMMA PORT (443) men OLIKA PROTOKOLL!

---

üåê VERKLIGT CASE - Mobiloperat√∂r blockerar UDP:

SCENARIO: F√∂retagets mobiln√§t

F√ñRETAG: "Telia Sverige"
PROBLEM: Vissa f√∂retagsn√§t blockerar all UDP (s√§kerhetspolicy)

VAD H√ÑNDER:
‚Ä¢ Anv√§ndare med f√∂retagsmobil bes√∂ker din sajt
‚Ä¢ Browser f√∂rs√∂ker HTTP/3 (UDP 443)
‚Ä¢ F√∂retagets brandv√§gg: ‚ùå BLOCKERAR UDP
‚Ä¢ Browser failover automatiskt till HTTP/2 (TCP 443)
‚Ä¢ Sajten fungerar fortfarande! (bara inte lika snabbt)

L√ñSNING:
HTTP/3 √§r "progressive enhancement":
‚Ä¢ Om UDP 443 fungerar ‚Üí Anv√§nd HTTP/3 (snabbt!)
‚Ä¢ Om UDP blockerad ‚Üí Anv√§nd HTTP/2 (fungerar √§nd√•!)
‚Ä¢ Ingen anv√§ndare ser error, bara olika hastighet

Detta √§r varf√∂r du beh√∂ver B√ÖDA:
‚Ä¢ TCP 443: F√∂r backward compatibility
‚Ä¢ UDP 443: F√∂r HTTP/3 prestanda

---

üí∞ VERKLIG KOSTNAD AV MISSAT UDP 443:

E-HANDELSSAJT: "TeknikPrylar.se"

SITUATION:
‚Ä¢ HTTP/3 konfigurerat i LiteSpeed
‚Ä¢ Men gl√∂mt √∂ppna UDP 443
‚Ä¢ Tror att HTTP/3 fungerar (g√∂r det inte!)

EFFEKT P√Ö MOBILA ANV√ÑNDARE:
‚Ä¢ 60% av trafik = mobil
‚Ä¢ Utan HTTP/3: Laddningstid 3.5 sekunder
‚Ä¢ Med HTTP/3: Laddningstid 1.8 sekunder

EKONOMISK P√ÖVERKAN:
‚Ä¢ Varje extra sekund laddningstid = 7% l√§gre konvertering
‚Ä¢ 3.5s vs 1.8s = 1.7 sekunder skillnad
‚Ä¢ 1.7 √ó 7% = ~12% l√§gre konvertering

MED 1 MILJON KR/M√ÖNAD MOBIL F√ñRS√ÑLJNING:
‚Ä¢ F√∂rlorad f√∂rs√§ljning: 120,000 kr/m√•nad
‚Ä¢ Per √•r: 1.44 miljoner kr!

KOSTNAD ATT FIXA:
‚Ä¢ 1 kommando i terminal: 10 sekunder
‚Ä¢ firewall-cmd --add-port=443/udp

ROI: 1.44 miljoner kr f√∂r 10 sekunders arbete! ü§Ø

---

üîß PRAKTISK CHECKLISTA - HTTP/3 Setup:

‚úÖ STEG 1: Aktivera QUIC i LiteSpeed
   WebAdmin ‚Üí Server Config ‚Üí QUIC
   Enable QUIC: YES

‚úÖ STEG 2: √ñppna TCP 443 (f√∂r HTTPS):
   firewall-cmd --add-port=443/tcp

‚úÖ STEG 3: √ñppna UDP 443 (f√∂r HTTP/3):
   firewall-cmd --add-port=443/udp  ‚Üê GL√ñM INTE!

‚úÖ STEG 4: Verifiera med online test:
   https://http3check.net/
   Eller: curl --http3 https://dinserver.se

‚úÖ STEG 5: Testa i Chrome:
   DevTools ‚Üí Network ‚Üí Protocol kolumn
   Ska visa "h3" f√∂r HTTP/3

---

üö® VANLIGA FEL VID HTTP/3 SETUP:

‚ùå FEL #1: Bara √∂ppnat TCP 443
   Symptom: QUIC handshake timeout
   Fix: √ñppna UDP 443

‚ùå FEL #2: √ñppnat fel port (typ 80 ist√§llet f√∂r 443)
   Symptom: HTTP/3 fungerar inte
   Fix: HTTP/3 anv√§nder alltid 443

‚ùå FEL #3: √ñppnat bara INBOUND, inte OUTBOUND
   Symptom: Anslutning startar men bryts
   Fix: √ñppna b√•de in OCH ut

‚ùå FEL #4: ISP blockerar UDP
   Symptom: Fungerar lokalt men inte remote
   Fix: Kontakta ISP (eller anv√§nd Cloudflare)

---

üìä TESTA OM HTTP/3 FUNGERAR:

TEST 1 - Med curl:
curl -I --http3 https://dinserver.se
Om fungerar: Ser "alt-svc: h3=":443""
Om inte: Connection timeout

TEST 2 - Med Chrome:
1. √ñppna chrome://flags
2. S√∂k "QUIC"
3. Enable "Experimental QUIC protocol"
4. Starta om Chrome
5. Bes√∂k din sajt
6. DevTools ‚Üí Network ‚Üí Protocol: "h3" ‚úÖ

TEST 3 - Online verktyg:
https://http3check.net/?host=dinserver.se
Visar: ‚úÖ HTTP/3 supported eller ‚ùå Not supported

TEST 4 - Fr√•n terminal:
tcpdump -i any port 443 and udp
Om HTTP/3 fungerar: Ser UDP paket p√• port 443

---

üéØ SAMMANFATTNING:

QUIC/HTTP/3 kr√§ver:
‚úÖ Port 443 p√• UDP (INTE TCP!)
‚úÖ B√•de INBOUND och OUTBOUND
‚úÖ LiteSpeed med QUIC enabled
‚úÖ Giltigt SSL-certifikat

VANLIGT MISSTAG:
‚ùå Gl√∂mma UDP (tror bara TCP r√§cker)
‚ùå √ñppna port 911 (fel port!)

RESULTAT n√§r r√§tt konfigurerat:
‚ö° 30-50% snabbare p√• mobil
üåç B√§ttre upplevelse globalt
üí∞ Mer f√∂rs√§ljning (snabbare = fler k√∂per)

Ett enda kommando kan ge miljoner i extra int√§kter! üöÄ`
  },
  {
    id: 5,
    question: "Of the following platforms, which does LiteSpeed provide brute force protection capabilities for?",
    answers: [
      "Drupal",
      "Magento",
      "cPanel",
      "WordPress"
    ],
    correctAnswer: 3,
    explanation: "LiteSpeed provides brute force protection for ALL of these platforms: WordPress (wp-login.php, xmlrpc.php), cPanel (WHM/cPanel login), Magento (admin panel), and Drupal (admin login). This is one of LiteSpeed's major advantages - built-in protection for multiple popular platforms without extra plugins. However, WordPress is the most well-known and widely used, making it the primary answer.",
    example: `VERKLIGT SCENARIO - Webbhotell stoppar 50,000 brute force-attacker/dag:

üè¢ F√ñRETAG: "WebHost Nordic" - 2,500 WordPress-sajter
üéØ PROBLEM: Dagliga brute force-attacker mot wp-login.php
üí∞ KOSTNAD: Server-belastning + hotellkunder klagar p√• l√•ngsam sajt

---

‚ùå F√ñRE LiteSpeed Brute Force Protection:

TYPISK ATTACK - En onsdag:

10:15 - Botnet b√∂rjar attackera 500 WordPress-sajter:
‚Ä¢ 10,000 login-f√∂rs√∂k/minut
‚Ä¢ wp-login.php k√∂rs 10,000 g√•nger
‚Ä¢ 10,000 databas-queries
‚Ä¢ Servrar √∂verbelastas
‚Ä¢ CPU: 95-100%
‚Ä¢ Legitima anv√§ndare f√•r timeout

10:45 - Admins f√•r panik-samtal:
Kund: "Min sajt √§r nere! Vad h√§nder?"
Admin: "Vi har en attack, vi jobbar p√• det..."

11:30 - Manuell blockering:
‚Ä¢ Admins m√•ste hitta attacker-IP:er
‚Ä¢ L√§gga till i firewall manuellt
‚Ä¢ Tar 2 timmar att stabilisera
‚Ä¢ Kunder fortfarande arga

KOSTNAD PER ATTACK:
‚Ä¢ IT-tid: 2 timmar √ó 500 kr/h = 1,000 kr
‚Ä¢ Kundf√∂rlust: 3 kunder s√§ger upp = 1,500 kr/m√•n
‚Ä¢ Server-skador: RAM/CPU slitage
‚Ä¢ TOTAL: ~5,000 kr per attack

---

‚úÖ EFTER LiteSpeed Brute Force Protection:

SAMMA ATTACK - En vecka senare:

10:15 - Botnet f√∂rs√∂ker attackera:

F√∂rsta IP (1.2.3.4) f√∂rs√∂ker logga in:
1. F√∂rs√∂k 1: Fel l√∂senord
2. F√∂rs√∂k 2: Fel l√∂senord
3. F√∂rs√∂k 3: Fel l√∂senord
4. F√∂rs√∂k 4: LiteSpeed blockerar IP i 300 sekunder
5. F√∂rs√∂k 5+: F√•r 403 Forbidden (anv√§nder 0% CPU!)

10:16 - Hela botnetet blockerat:
‚Ä¢ 50,000 IPs f√∂rs√∂ker attackera
‚Ä¢ Alla blockeras efter 3-5 f√∂rs√∂k
‚Ä¢ Server-CPU: 5% (normalt!)
‚Ä¢ Legitima anv√§ndare m√§rker INGENTING

---

üìä RESULTAT EFTER 1 M√ÖNAD:

BLOCKERADE ATTACKER:
‚Ä¢ WordPress: 1,200,000 f√∂rs√∂k blockerade
‚Ä¢ cPanel: 45,000 f√∂rs√∂k blockerade  
‚Ä¢ Magento: 12,000 f√∂rs√∂k blockerade
‚Ä¢ Drupal: 8,000 f√∂rs√∂k blockerade
‚Ä¢ TOTALT: 1,265,000 attacker stoppade! üõ°Ô∏è

SERVER-PRESTANDA:
‚Ä¢ CPU-anv√§ndning: 85% ‚Üí 12% (normal)
‚Ä¢ RAM-anv√§ndning: 92% ‚Üí 35%
‚Ä¢ Responstid: 4s ‚Üí 0.6s
‚Ä¢ Inga crasher eller downtid

EKONOMI:
‚Ä¢ IT-tid sparad: 80 timmar = 40,000 kr
‚Ä¢ Kundf√∂rlust: 0 (alla n√∂jda!)
‚Ä¢ Extra servrar: Beh√∂vs ej (sparar 300‚Ç¨/m√•n)
‚Ä¢ TOTAL BESPARING: 60,000 kr f√∂rsta m√•naden

---

üèÜ SAMMANFATTNING:

LiteSpeed Brute Force Protection:
‚úÖ WordPress (wp-login.php + xmlrpc.php)
‚úÖ cPanel/WHM (login-sidor)
‚úÖ Magento (admin panel)
‚úÖ Drupal (user login)

F√ñRDELAR:
‚ö° Inbyggt i LiteSpeed (ingen extra plugin)
üõ°Ô∏è Automatisk blockering
üí∞ Sparar tusentals kronor
üöÄ Ingen prestanda-p√•verkan
üéØ Fungerar f√∂r ALLA plattformar samtidigt

En rad i config = 1,000,000+ attacker stoppade/√•r! üéñÔ∏è`
  },
  {
    id: 6,
    question: "Vilket av f√∂ljande p√•st√•enden beskriver b√§st LSPHP:s st√∂d f√∂r PHP-versioner?",
    answers: [
      "LSPHP st√∂djer olika PHP-versioner per server, inom en servers klusterkonfiguration.",
      "LSPHP st√∂djer olika PHP-versioner per konto, inom en webbservers globala konfiguration.",
      "LSPHP st√∂djer olika PHP-versioner per katalog, inom ett kontos filstruktur.",
      "LSPHP st√∂djer endast en PHP-version √•t g√•ngen."
    ],
    correctAnswer: 2,
    explanation: "LSPHP (LiteSpeed PHP) st√∂djer flera PHP-versioner per katalog inom ett kontos filstruktur. Detta inneb√§r att du kan ha olika PHP-versioner f√∂r olika kataloger inom samma webbhotellkonto, vilket ger maximal flexibilitet. Du kan st√§lla in detta via .htaccess-filer med direktiv som 'lsapi_phprc' eller genom cPanels MultiPHP Manager.",
    example: `REAL-WORLD SCENARIO - Web hosting with multiple PHP version requirements:

üè¢ COMPANY: "DevHost Solutions" - Hosting 5,000 accounts
üéØ CHALLENGE: Customers need different PHP versions for different applications
üí∞ SOLUTION: LSPHP's per-directory PHP version support

---

‚ùå BEFORE LSPHP (Traditional Apache + mod_php):

PROBLEM - One PHP version per entire server:

Customer "TechCorp AB" has 3 applications:
1. Legacy WordPress 4.5 (requires PHP 5.6)
2. Modern WooCommerce shop (requires PHP 8.1)
3. Custom Laravel app (requires PHP 8.2)

With mod_php:
‚Ä¢ Server has ONE PHP version installed (e.g., PHP 7.4)
‚Ä¢ Customer: "My WordPress is broken!" (needs 5.6)
‚Ä¢ Customer: "My Laravel won't run!" (needs 8.2)
‚Ä¢ Support: "We can only offer one PHP version per server"
‚Ä¢ Solution: Customer must buy 3 separate hosting accounts!
‚Ä¢ Cost: 3 √ó $15/month = $45/month

HOSTING COMPANY PROBLEMS:
‚Ä¢ Unhappy customers
‚Ä¢ Lost revenue (customers leave)
‚Ä¢ Support tickets: 500/month about PHP versions
‚Ä¢ Staff cost: 100 hours/month = $5,000

---

‚úÖ AFTER LSPHP (Per-Directory PHP Support):

SAME CUSTOMER - Perfect solution:

Account structure:
/public_html/
‚îú‚îÄ‚îÄ old-blog/          (PHP 5.6)
‚îú‚îÄ‚îÄ shop/              (PHP 8.1)
‚îî‚îÄ‚îÄ app/               (PHP 8.2)

CONFIGURATION:

/public_html/old-blog/.htaccess:
<IfModule LiteSpeed>
  php_value lsapi_phprc /opt/alt/php56/etc
</IfModule>

/public_html/shop/.htaccess:
<IfModule LiteSpeed>
  php_value lsapi_phprc /opt/alt/php81/etc
</IfModule>

/public_html/app/.htaccess:
<IfModule LiteSpeed>
  php_value lsapi_phprc /opt/alt/php82/etc
</IfModule>

RESULT:
‚úÖ All 3 apps work perfectly on ONE account!
‚úÖ Customer pays $15/month (not $45)
‚úÖ No support tickets
‚úÖ Happy customer!

---

üìä REAL EXAMPLE - E-commerce site migration:

SCENARIO: "NordicShop.se" upgrading from PHP 7.2 to PHP 8.2

MIGRATION STRATEGY with LSPHP:

WEEK 1 - Test environment:
/public_html/          (PHP 7.2 - production)
/public_html/beta/     (PHP 8.2 - testing)

Customer tests new version at: shop.se/beta/
No risk to production site!

WEEK 2 - Gradual rollout:
/public_html/checkout/ (PHP 8.2 - upgraded first)
/public_html/          (PHP 7.2 - rest of site)

Monitor: Is checkout working? Yes! ‚úÖ

WEEK 3 - Full migration:
/public_html/          (PHP 8.2 - everything)

ZERO DOWNTIME! üéâ

---

üí° TECHNICAL COMPARISON:

APACHE mod_php:
‚Ä¢ ONE PHP version per entire server
‚Ä¢ Changing version affects ALL accounts
‚Ä¢ Risky upgrades (all or nothing)
‚Ä¢ Inflexible

APACHE FastCGI + suPHP:
‚Ä¢ Different versions per account
‚Ä¢ Still can't have multiple versions in one account
‚Ä¢ Performance overhead
‚Ä¢ Complex configuration

LSPHP (LiteSpeed PHP):
‚Ä¢ Different versions per DIRECTORY!
‚Ä¢ Can have PHP 5.6, 7.4, 8.1, 8.2 in same account
‚Ä¢ Fast (compiled as binary)
‚Ä¢ Easy configuration (.htaccess)
‚Ä¢ Perfect for gradual migrations

---

üîß PRACTICAL CONFIGURATION EXAMPLES:

EXAMPLE 1 - WordPress Multisite with different themes:

/public_html/
‚îú‚îÄ‚îÄ site1/  (Old theme needs PHP 7.4)
‚îú‚îÄ‚îÄ site2/  (New theme needs PHP 8.1)
‚îî‚îÄ‚îÄ site3/  (Beta testing PHP 8.2)

Each site/.htaccess:
<IfModule LiteSpeed>
  php_value lsapi_phprc /opt/alt/php74/etc
</IfModule>

EXAMPLE 2 - Development workflow:

/public_html/
‚îú‚îÄ‚îÄ production/   (PHP 8.1 - stable)
‚îú‚îÄ‚îÄ staging/      (PHP 8.2 - testing)
‚îî‚îÄ‚îÄ dev/          (PHP 8.3 - experimental)

Perfect for testing upgrades safely!

---

üèÜ SUMMARY:

LSPHP supports:
‚úÖ Different PHP versions PER-DIRECTORY
‚úÖ Within same account
‚úÖ Configured via .htaccess
‚úÖ No server restart needed
‚úÖ Zero downtime migrations

BENEFITS:
‚ö° Maximum flexibility
üí∞ Save money (one account instead of many)
üõ°Ô∏è Safe testing (test in subdirectory)
üöÄ Easy gradual migrations
üë®‚Äçüíª Developer-friendly

The correct answer is: c. LSPHP supports the use of different PHP versions per-directory, within an account's file structure.`
  },
  {
    id: 7,
    question: "F√∂r vilken av f√∂ljande webbserver-programvaror fungerar LiteSpeed som en drop-in replacement?",
    answers: [
      "Nginx",
      "WordPress",
      "IIS",
      "Apache"
    ],
    correctAnswer: 3,
    explanation: "LiteSpeed √§r designad som en direkt ers√§ttning (drop-in replacement) f√∂r Apache. Det betyder att LiteSpeed kan l√§sa Apaches konfigurationsfiler (inklusive .htaccess), st√∂djer samma rewrite-regler, och kan ers√§tta Apache utan att beh√∂va omkonfigurera din webbplats. Detta g√∂r migrering fr√•n Apache till LiteSpeed extremt enkel.",
    example: `VERKLIGT SCENARIO - Webbhotell migrerar fr√•n Apache till LiteSpeed:

üè¢ F√ñRETAG: "HostNordic AB" - Webbhotell med 10,000 WordPress-sajter
üìä NUVARANDE: Apache 2.4 med mod_php
üéØ M√ÖL: B√§ttre prestanda utan att st√∂ra kunderna

---

‚ùå VARF√ñR INTE DE ANDRA ALTERNATIVEN:

üî¥ NGINX:
‚Ä¢ Helt olika konfiguration
‚Ä¢ St√∂djer INTE .htaccess
‚Ä¢ M√•ste konvertera alla rewrite-regler manuellt
‚Ä¢ WordPress plugins som f√∂rlitar sig p√• .htaccess fungerar inte
‚Ä¢ Kr√§ver veckor av omkonfiguration

üî¥ IIS (Internet Information Services):
‚Ä¢ Microsofts webbserver f√∂r Windows
‚Ä¢ Helt annat operativsystem (Windows vs Linux)
‚Ä¢ Olika konfigurationsformat
‚Ä¢ Ingen kompatibilitet alls med Apache

üî¥ WORDPRESS:
‚Ä¢ WordPress √§r INTE en webbserver!
‚Ä¢ Det √§r ett CMS (Content Management System)
‚Ä¢ WordPress K√ñR p√• en webbserver (Apache/Nginx/LiteSpeed)

---

‚úÖ VARF√ñR APACHE √ÑR R√ÑTT SVAR:

LITESPEED = DROP-IN REPLACEMENT F√ñR APACHE

Vad betyder "drop-in replacement"?
‚Üí Du kan byta ut Apache mot LiteSpeed UTAN att √§ndra konfiguration!

F√ñRE MIGRERING - Apache:
/etc/httpd/conf/httpd.conf      (Apache huvudconfig)
/var/www/html/.htaccess         (Apache rewrite-regler)
/etc/httpd/conf.d/*.conf        (Virtual hosts)

EFTER MIGRERING - LiteSpeed:
/usr/local/lsws/conf/httpd_config.xml  (LiteSpeed config)
/var/www/html/.htaccess         (SAMMA .htaccess fungerar!)
/etc/httpd/conf.d/*.conf        (LiteSpeed L√ÑSER Apache vhosts!)

---

üìã VERKLIG MIGRERING - Steg f√∂r steg:

F√ñRETAG: HostNordic AB migrerar en server:

FREDAG 22:00 - F√∂rberedelser:
1. Installera LiteSpeed: 
   $ wget https://www.litespeedtech.com/packages/...
   $ sh install.sh
   
2. Konfigurera LiteSpeed att l√§sa Apache config:
   $ /usr/local/lsws/admin/misc/enable_apache_conf.sh

FREDAG 22:30 - Test:
3. K√∂r LiteSpeed p√• port 8080 (test):
   $ systemctl start lsws
   
4. Testa en WordPress-sajt:
   http://test.se:8080 ‚Üí ‚úÖ Fungerar perfekt!
   Alla plugins: ‚úÖ Fungerar
   .htaccess regler: ‚úÖ Fungerar
   Permalinks: ‚úÖ Fungerar

FREDAG 23:00 - PRODUKTION:
5. Stoppa Apache:
   $ systemctl stop httpd
   
6. Konfigurera LiteSpeed port 80:
   $ /usr/local/lsws/admin/misc/enable_port_80.sh
   
7. Starta LiteSpeed:
   $ systemctl restart lsws

FREDAG 23:05 - KLART! üéâ

ALLA 10,000 SAJTER FUNGERAR DIREKT!
‚Ä¢ Inga konfigurations√§ndringar beh√∂vdes
‚Ä¢ Inga kunder m√§rkte n√•got
‚Ä¢ Ingen downtime
‚Ä¢ Allt fungerar bara SNABBARE nu!

---

üîß TEKNISKA DETALJER - Vad √§r kompatibelt:

‚úÖ KOMPATIBELT MED APACHE:

1. .htaccess filer:
   RewriteEngine On
   RewriteRule ^old-page$ /new-page [R=301,L]
   ‚Üí Fungerar identiskt i LiteSpeed!

2. Apache directives:
   DirectoryIndex index.php index.html
   Options +FollowSymLinks
   ‚Üí LiteSpeed f√∂rst√•r samma syntax!

3. mod_rewrite regler:
   RewriteCond %{HTTP_HOST} ^www\.(.*)$ [NC]
   RewriteRule ^(.*)$ http://%1/$1 [R=301,L]
   ‚Üí Beh√∂ver INGEN √§ndring!

4. Virtual hosts:
   <VirtualHost *:80>
     ServerName example.com
     DocumentRoot /var/www/html
   </VirtualHost>
   ‚Üí LiteSpeed l√§ser direkt fr√•n Apache config!

5. PHP konfiguration:
   php_value upload_max_filesize 64M
   php_value post_max_size 64M
   ‚Üí Fungerar via LSPHP!

---

üìä BENCHMARKS - F√∂re vs Efter migrering:

TEST: WordPress webshop med WooCommerce
Samtidiga anv√§ndare: 1,000

APACHE:
‚Ä¢ Requests/sekund: 45
‚Ä¢ Responstid: 2.2 sekunder
‚Ä¢ CPU: 85%
‚Ä¢ RAM: 28GB / 32GB

LITESPEED (samma h√•rdvara):
‚Ä¢ Requests/sekund: 450 (10X!)
‚Ä¢ Responstid: 0.2 sekunder (11X snabbare!)
‚Ä¢ CPU: 35%
‚Ä¢ RAM: 8GB / 32GB

---

üí∞ VERKLIG KOSTNADSBESPARING:

F√ñRE (Apache):
‚Ä¢ Servrar: 10 √ó $200/m√•nad = $2,000/m√•nad
‚Ä¢ Totalt: $24,000/√•r

EFTER (LiteSpeed):
‚Ä¢ Servrar: 3 √ó $200/m√•nad = $600/m√•nad
‚Ä¢ LiteSpeed licens: 3 √ó $50/m√•nad = $150/m√•nad
‚Ä¢ Totalt: $9,000/√•r

BESPARING: $15,000/√•r! üí∞

Och det tog bara 5 minuter att migrera!

---

üéì ANDRA VERKLIGA EXEMPEL:

EXEMPEL 1 - Joomla-sajt:
Apache ‚Üí LiteSpeed
Migreringstid: 3 minuter
Problem: 0
Prestanda: +800%

EXEMPEL 2 - Drupal multisite:
Apache ‚Üí LiteSpeed  
Migreringstid: 10 minuter (15 sajter)
Problem: 0
Prestanda: +650%

EXEMPEL 3 - Custom PHP-applikation:
Apache ‚Üí LiteSpeed
Migreringstid: 2 minuter
Problem: 0  
Prestanda: +500%

---

üèÜ SAMMANFATTNING:

LiteSpeed √§r en DROP-IN REPLACEMENT f√∂r Apache:

‚úÖ L√§ser Apaches konfigurationsfiler
‚úÖ St√∂djer .htaccess fullt ut
‚úÖ Samma rewrite-syntax
‚úÖ Samma virtual host-konfiguration
‚úÖ Ingen omkonfiguration beh√∂vs
‚úÖ Migrering tar 5-10 minuter
‚úÖ Prestanda: 5-10X b√§ttre √§n Apache

J√ÑMF√ñRELSE:
‚Ä¢ Apache ‚Üí LiteSpeed: ‚úÖ Drop-in replacement (5 min)
‚Ä¢ Apache ‚Üí Nginx: ‚ùå Kr√§ver omkonfiguration (veckor)
‚Ä¢ Apache ‚Üí IIS: ‚ùå Helt annat system (om√∂jligt)
‚Ä¢ WordPress √§r ingen webbserver ‚ùå

R√§tt svar: d. Apache

LiteSpeed √§r DESIGNAD f√∂r att ers√§tta Apache sm√§rtfritt! üöÄ`
  },
  {
    id: 8,
    question: "Vilket av f√∂ljande alternativ indikerar mest korrekt den prim√§ra anledningen till att ModSecurity uppn√•r en betydande prestanda√∂kning n√§r det anv√§nds med LiteSpeed?",
    answers: [
      "ModSecurity i LiteSpeed bearbetar endast regler baserat p√• en f√∂rdefinierad upps√§ttning schemalagda timmar baserat p√• kontorstillg√§nglighet.",
      "ModSecurity i LiteSpeed bearbetar endast regler f√∂r statiska f√∂rfr√•gningar, inte dynamiska.",
      "ModSecurity i LiteSpeed bearbetar endast regler f√∂r dynamiska f√∂rfr√•gningar, inte statiska.",
      "ModSecurity i LiteSpeed bearbetar endast regler baserat p√• en f√∂rdefinierad serie motiverande citat och utdrag, vilket f√∂rb√§ttrar serverns moral."
    ],
    correctAnswer: 2,
    explanation: "ModSecurity i LiteSpeed bearbetar endast regler f√∂r dynamiska f√∂rfr√•gningar (som PHP, Python, etc.), INTE f√∂r statiska filer (som bilder, CSS, JS). Detta √§r den prim√§ra anledningen till den enorma prestanda√∂kningen. Statiska filer beh√∂ver ingen s√§kerhetskontroll eftersom de inte kan k√∂ra skadlig kod. Genom att hoppa √∂ver ModSecurity f√∂r statiska filer sparar LiteSpeed massvis med CPU-kraft.",
    example: `VERKLIGT SCENARIO - ModSecurity prestandaf√∂rb√§ttring med LiteSpeed:

üè¢ F√ñRETAG: "SecureHost Sverige" - S√§kerhetsmedvetet webbhotell
üìä PROBLEM: ModSecurity p√• Apache √§r extremt l√•ngsamt
üéØ L√ñSNING: Byt till LiteSpeed f√∂r smart ModSecurity-hantering

---

‚ùå APACHE + ModSecurity - Bearbetar ALLT:

TYPISK WORDPRESS-SIDA med 50 resurser:
1 √ó index.php (dynamisk)
10 √ó bilder (.jpg, .png)
5 √ó stylesheets (.css)
8 √ó javascript-filer (.js)
3 √ó font-filer (.woff2)
2 √ó ikoner (.svg)
---
= 29 resurser TOTALT

APACHE + ModSecurity:
‚Ä¢ K√∂r ModSecurity-regler f√∂r ALLA 29 f√∂rfr√•gningar!
‚Ä¢ √Ñven f√∂r bild1.jpg (statisk fil som INTE kan hackas)
‚Ä¢ √Ñven f√∂r style.css (statisk fil som INTE kan k√∂ra kod)
‚Ä¢ √Ñven f√∂r logo.svg (statisk fil som INTE √§r farlig)

RESULTAT per sida-laddning:
‚Ä¢ ModSecurity-kontroller: 29 g√•nger
‚Ä¢ Extra CPU-tid: ~580ms (29 √ó 20ms per kontroll)
‚Ä¢ On√∂dig belastning: 96.5% (28 av 29 filer √§r statiska!)

MED 1,000 bes√∂kare/timme:
‚Ä¢ On√∂diga ModSecurity-kontroller: 28,000/timme
‚Ä¢ Sl√∂sad CPU-tid: 560 sekunder = 9.3 minuter/timme!
‚Ä¢ Server blir l√•ngsam och dyr

---

‚úÖ LITESPEED + ModSecurity - Smart filtrering:

SAMMA WORDPRESS-SIDA med 50 resurser:
1 √ó index.php (dynamisk) ‚Üí ‚úÖ K√∂r ModSecurity
10 √ó bilder (.jpg, .png) ‚Üí ‚è≠Ô∏è Hoppar √∂ver ModSecurity
5 √ó stylesheets (.css) ‚Üí ‚è≠Ô∏è Hoppar √∂ver ModSecurity
8 √ó javascript-filer (.js) ‚Üí ‚è≠Ô∏è Hoppar √∂ver ModSecurity
3 √ó font-filer (.woff2) ‚Üí ‚è≠Ô∏è Hoppar √∂ver ModSecurity
2 √ó ikoner (.svg) ‚Üí ‚è≠Ô∏è Hoppar √∂ver ModSecurity

RESULTAT per sida-laddning:
‚Ä¢ ModSecurity-kontroller: 1 g√•ng (bara PHP!)
‚Ä¢ Extra CPU-tid: ~20ms (bara dynamisk fil)
‚Ä¢ Effektivitet: 96.5% b√§ttre √§n Apache!

MED 1,000 bes√∂kare/timme:
‚Ä¢ ModSecurity-kontroller: 1,000/timme (28X f√§rre!)
‚Ä¢ CPU-tid: 20 sekunder/timme (28X mindre!)
‚Ä¢ Server √§r snabb och billig! üöÄ

---

üî¨ TEKNISK F√ñRKLARING - Varf√∂r detta fungerar:

STATISKA FILER = S√ÑKRA:
‚Ä¢ Bilder (jpg, png, gif, webp) ‚Üí Kan INTE k√∂ra kod
‚Ä¢ CSS-filer ‚Üí Kan INTE exekvera skript
‚Ä¢ JavaScript-filer ‚Üí Redan validerade, levereras som-√§r
‚Ä¢ Fonts (woff2, ttf) ‚Üí Kan INTE vara skadliga
‚Ä¢ Videos (mp4, webm) ‚Üí Kan INTE k√∂ra attacker

‚Üí ModSecurity-kontroller √§r ON√ñDIGA f√∂r dessa!

DYNAMISKA F√ñRFR√ÖGNINGAR = RISKFYLLDA:
‚Ä¢ PHP-filer ‚Üí Kan ta emot skadlig input
‚Ä¢ Form submissions ‚Üí Risk f√∂r SQL injection
‚Ä¢ Login-sidor ‚Üí Risk f√∂r brute force
‚Ä¢ API-endpoints ‚Üí Risk f√∂r XSS, CSRF
‚Ä¢ Database queries ‚Üí Risk f√∂r injection

‚Üí ModSecurity M√ÖSTE kontrollera dessa!

---

üìä VERKLIGA BENCHMARKS:

TEST 1 - WordPress Blog (typisk sajt):
Resurser per sida: 35 (1 PHP + 34 statiska)

Apache + ModSecurity:
‚Ä¢ Laddningstid: 2.4 sekunder
‚Ä¢ Server-CPU: 78%
‚Ä¢ ModSecurity overhead: 850ms

LiteSpeed + ModSecurity:
‚Ä¢ Laddningstid: 0.3 sekunder (8X snabbare!)
‚Ä¢ Server-CPU: 12%
‚Ä¢ ModSecurity overhead: 25ms (34X snabbare!)

TEST 2 - WooCommerce Webshop:
Resurser per produktsida: 68 (2 PHP + 66 statiska)

Apache + ModSecurity:
‚Ä¢ Laddningstid: 4.8 sekunder
‚Ä¢ Server-CPU: 92%
‚Ä¢ ModSecurity overhead: 1,700ms

LiteSpeed + ModSecurity:
‚Ä¢ Laddningstid: 0.4 sekunder (12X snabbare!)
‚Ä¢ Server-CPU: 18%
‚Ä¢ ModSecurity overhead: 50ms (34X snabbare!)

TEST 3 - Bild-galleri (mycket statiskt):
Resurser per sida: 120 (1 PHP + 119 bilder)

Apache + ModSecurity:
‚Ä¢ Laddningstid: 8.2 sekunder
‚Ä¢ Server-CPU: 98%
‚Ä¢ ModSecurity overhead: 3,000ms
‚Ä¢ N√§stan oanv√§ndbar!

LiteSpeed + ModSecurity:
‚Ä¢ Laddningstid: 0.6 sekunder (13X snabbare!)
‚Ä¢ Server-CPU: 8%
‚Ä¢ ModSecurity overhead: 25ms (120X snabbare!)
‚Ä¢ Perfekt anv√§ndbar! ‚úÖ

---

üí° VARF√ñR INTE DE ANDRA ALTERNATIVEN:

üî¥ a. "Baserat p√• schemalagda timmar och kontorstillg√§nglighet"
‚Üí Helt nonsens! ModSecurity arbetar 24/7, inte enligt kontorstid!
‚Üí Hackers sover inte 9-5, s√• detta skulle vara v√§rdel√∂st!

üî¥ b. "Endast f√∂r statiska f√∂rfr√•gningar, inte dynamiska"
‚Üí BAKL√ÑNGES! Detta skulle vara helt meningsl√∂st!
‚Üí Statiska filer kan inte hackas, s√• varf√∂r kontrollera dem?
‚Üí Dynamiska f√∂rfr√•gningar √§r d√§r attackerna sker!

üî¥ d. "Baserat p√• motiverande citat som f√∂rb√§ttrar serverns moral"
‚Üí Uppenbart sk√§mt! üòÑ
‚Üí Servrar har ingen "moral" att f√∂rb√§ttra!

‚úÖ c. "Endast f√∂r dynamiska f√∂rfr√•gningar, inte statiska"
‚Üí R√ÑTT! Detta √§r exakt hur det fungerar!
‚Üí Smart, logisk, och extremt effektivt!

---

üéØ VERKLIG KONFIGURATION:

I LiteSpeed WebAdmin:
Server Configuration ‚Üí External App ‚Üí ModSecurity

Hook Type: HTTP_REQUEST_EARLY
Process Static Files: ‚ùå NO (Detta √§r nyckeln!)
Process Dynamic Files: ‚úÖ YES

Denna simpla inst√§llning ger 30-100X snabbare ModSecurity! üöÄ

---

üí∞ EKONOMISK P√ÖVERKAN:

F√ñRETAG: E-handelssajt med 50,000 bes√∂kare/dag

Apache + ModSecurity:
‚Ä¢ Servrar beh√∂vda: 8 √ó $200/m√•n = $1,600/m√•n
‚Ä¢ CPU-anv√§ndning: 85-95%
‚Ä¢ Kund-upplevelse: L√•ngsam (3-4s laddningstid)

LiteSpeed + ModSecurity:
‚Ä¢ Servrar beh√∂vda: 2 √ó $200/m√•n = $400/m√•n
‚Ä¢ LiteSpeed licens: 2 √ó $50/m√•n = $100/m√•n
‚Ä¢ Total: $500/m√•n
‚Ä¢ CPU-anv√§ndning: 15-25%
‚Ä¢ Kund-upplevelse: Snabb (0.3s laddningstid)

BESPARING: $1,100/m√•n = $13,200/√•r! üí∞

Och du f√•r B√ÑTTRE s√§kerhet + B√ÑTTRE prestanda!

---

üèÜ SAMMANFATTNING:

ModSecurity i LiteSpeed √§r snabbare f√∂r att:
‚úÖ Hoppar √∂ver statiska filer (bilder, CSS, JS, fonts)
‚úÖ Bearbetar endast dynamiska f√∂rfr√•gningar (PHP, Python, etc.)
‚úÖ 30-100X f√§rre ModSecurity-kontroller
‚úÖ 95% mindre CPU-belastning fr√•n ModSecurity
‚úÖ Samma s√§kerhet, dramatiskt b√§ttre prestanda

ANALOGIER:
‚Ä¢ Som att inte kolla pass p√• stenar (statiska filer)
‚Ä¢ Men kolla pass p√• alla m√§nniskor (dynamiska requests)
‚Ä¢ Smart, effektivt, logiskt!

R√§tt svar: c. ModSecurity i LiteSpeed bearbetar endast regler f√∂r dynamiska f√∂rfr√•gningar, inte statiska.

Detta √§r den PRIM√ÑRA anledningen till prestanda√∂kningen! üéñÔ∏è`
  },
  {
    id: 9,
    question: "Vilken av f√∂ljande Apache rewrite-flaggor fungerar n√•got annorlunda n√§r man anv√§nder LiteSpeed, j√§mf√∂rt med Apache?",
    answers: [
      "[F] (forbidden) flaggan",
      "[L] (last) flaggan",
      "[R] (redirect) flaggan",
      "[E] (environment) flaggan"
    ],
    correctAnswer: 1,
    explanation: "[L] (last) flaggan fungerar annorlunda i LiteSpeed j√§mf√∂rt med Apache. I Apache stoppar [L] endast bearbetningen av den aktuella .htaccess-filen men forts√§tter sedan till n√§sta .htaccess om den finns. I LiteSpeed stoppar [L] ALL ytterligare rewrite-bearbetning helt och h√•llet, vilket ofta √§r mer intuitivt och effektivt.",
    example: `VERKLIGT SCENARIO - Rewrite-flaggor i LiteSpeed vs Apache:

üè¢ F√ñRETAG: "WebDev Stockholm" - Webbyr√• med komplexa URL-omdirigeringar
üìä PROBLEM: .htaccess-regler fungerar annorlunda efter migrering
üéØ L√ñSNING: F√∂rst√• skillnaden i [L] flaggan mellan Apache och LiteSpeed

---

üî¥ APACHE - [L] flaggan fungerar annorlunda:

.htaccess i /public_html/:
RewriteEngine On
RewriteRule ^old-page$ /new-page [L]
RewriteRule ^test$ /testing [L]

.htaccess i /public_html/subfolder/:
RewriteEngine On
RewriteRule ^page$ /final-page [L]

APACHE-BETEENDE:
Beg√§ran: example.com/old-page

1. L√§ser /public_html/.htaccess
2. Hittar regel: ^old-page$ ‚Üí /new-page [L]
3. [L] flaggan: "Stop processing THIS .htaccess"
4. Men forts√§tter till N√ÑSTA .htaccess!
5. Om /new-page har .htaccess ‚Üí Bearbetar DEN ocks√•!
6. Kan leda till ov√§ntade omdirigeringar

Detta √§r F√ñRVIRRANDE och kan orsaka buggar!

---

‚úÖ LITESPEED - [L] flaggan fungerar logiskt:

SAMMA .htaccess-filer:

.htaccess i /public_html/:
RewriteEngine On
RewriteRule ^old-page$ /new-page [L]
RewriteRule ^test$ /testing [L]

.htaccess i /public_html/subfolder/:
RewriteEngine On
RewriteRule ^page$ /final-page [L]

LITESPEED-BETEENDE:
Beg√§ran: example.com/old-page

1. L√§ser /public_html/.htaccess
2. Hittar regel: ^old-page$ ‚Üí /new-page [L]
3. [L] flaggan: "STOPP! Ingen mer rewrite-bearbetning!"
4. Klar! ‚úÖ

Detta √§r INTUITIVT och f√∂ruts√§gbart!

---

üìã VERKLIGT PROBLEM-EXEMPEL:

SCENARIO: WordPress multisite med undermappar

STRUKTUR:
/public_html/
  ‚îú‚îÄ‚îÄ .htaccess (huvudregler)
  ‚îú‚îÄ‚îÄ site1/
  ‚îÇ   ‚îî‚îÄ‚îÄ .htaccess (WordPress-regler)
  ‚îî‚îÄ‚îÄ site2/
      ‚îî‚îÄ‚îÄ .htaccess (WordPress-regler)

/public_html/.htaccess:
RewriteEngine On
# Omdirigera gamla dom√§ner
RewriteCond %{HTTP_HOST} ^old-domain\.com$ [NC]
RewriteRule ^(.*)$ https://new-domain.com/$1 [R=301,L]

# WordPress-regler
RewriteRule ^index\.php$ - [L]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /index.php [L]

---

üî¥ MED APACHE - Ov√§ntat beteende:

Beg√§ran: old-domain.com/site1/about

1. L√§ser huvudfilen .htaccess
2. Hittar: old-domain.com ‚Üí new-domain.com [L]
3. [L]: "OK, klar med DENNA .htaccess"
4. Men... forts√§tter till /site1/.htaccess
5. D√§r finns MER rewrite-logik
6. Kan omdirigera IGEN
7. Slutresultat: Dubbel-omdirigering eller loop!

RESULTAT: üî¥ Redirect loop eller fel URL!

---

‚úÖ MED LITESPEED - F√∂rv√§ntat beteende:

Beg√§ran: old-domain.com/site1/about

1. L√§ser huvudfilen .htaccess
2. Hittar: old-domain.com ‚Üí new-domain.com [L]
3. [L]: "STOPP! Klar helt!"
4. Slutresultat: new-domain.com/site1/about ‚úÖ

RESULTAT: ‚úÖ Fungerar perfekt f√∂rsta g√•ngen!

---

üîß PRAKTISKT EXEMPEL - WordPress med anpassad omdirigering:

.htaccess:
RewriteEngine On

# Gamla blogginl√§gg
RewriteRule ^blogg/([0-9]+)$ /blog/$1 [R=301,L]

# WordPress standard
RewriteRule ^index\.php$ - [L]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /index.php [L]

BEG√ÑRAN: example.com/blogg/123

APACHE:
1. Regel tr√§ffar: blogg/123 ‚Üí /blog/123 [L]
2. [L] stoppar denna .htaccess
3. MEN... intern omdirigering startar OM
4. Rewrite-motorn k√∂rs IGEN
5. Regel 3 (WordPress fallback) triggas
6. Kan orsaka problem!

LITESPEED:
1. Regel tr√§ffar: blogg/123 ‚Üí /blog/123 [L]
2. [L] stoppar ALL rewrite-bearbetning
3. Klar! ‚úÖ
4. Snabbare och mer f√∂ruts√§gbart!

---

üí° VARF√ñR ANDRA FLAGGOR FUNGERAR SAMMA:

‚úÖ [F] (Forbidden):
‚Ä¢ Apache: Returnerar 403 Forbidden
‚Ä¢ LiteSpeed: Returnerar 403 Forbidden
‚Ä¢ INGEN SKILLNAD

‚úÖ [R] (Redirect):
‚Ä¢ Apache: G√∂r extern 302/301 redirect
‚Ä¢ LiteSpeed: G√∂r extern 302/301 redirect
‚Ä¢ INGEN SKILLNAD

‚úÖ [E] (Environment):
‚Ä¢ Apache: S√§tter milj√∂variabel
‚Ä¢ LiteSpeed: S√§tter milj√∂variabel
‚Ä¢ INGEN SKILLNAD

‚ùó [L] (Last):
‚Ä¢ Apache: Stoppar DENNA .htaccess, forts√§tter n√§sta
‚Ä¢ LiteSpeed: Stoppar ALL rewrite-bearbetning
‚Ä¢ STOR SKILLNAD!

---

üìä PRESTANDAJ√ÑMF√ñRELSE:

TEST: WordPress-sajt med komplex .htaccess (15 regler)

APACHE med [L]:
‚Ä¢ Kan bearbeta samma request flera g√•nger
‚Ä¢ 3-5 rewrite-cykler per request
‚Ä¢ Rewrite-tid: 15-25ms per request

LITESPEED med [L]:
‚Ä¢ Bearbetar request EN g√•ng
‚Ä¢ 1 rewrite-cykel per request
‚Ä¢ Rewrite-tid: 3-5ms per request

RESULTAT: LiteSpeed √§r 5X snabbare p√• rewrite!

---

üéØ MIGRERINGSTIPS - Apache till LiteSpeed:

TIPS 1: Testa dina .htaccess-regler
Om du har nested .htaccess-filer, testa noga!

TIPS 2: [L] √§r nu mer kraftfull
Du kan f√∂renkla komplexa regler eftersom [L] stoppar allt.

TIPS 3: Ta bort redundanta regler
M√•nga "workarounds" f√∂r Apache beh√∂vs inte i LiteSpeed.

EXEMPEL - F√∂re (Apache):
RewriteRule ^old$ /new [L,NS]  # NS = No Subrequest
# Beh√∂vdes f√∂r att undvika Apache-loops

EXEMPEL - Efter (LiteSpeed):
RewriteRule ^old$ /new [L]  # NS beh√∂vs inte!
# [L] stoppar redan allt!

---

üèÜ SAMMANFATTNING:

[L] (Last) flaggan √§r OLIKA:

APACHE:
‚Ä¢ Stoppar aktuell .htaccess
‚Ä¢ Forts√§tter till n√§sta .htaccess
‚Ä¢ Kan orsaka loops
‚Ä¢ Mindre intuitivt

LITESPEED:
‚Ä¢ Stoppar ALL rewrite-bearbetning
‚Ä¢ Inget mer k√∂rs efter [L]
‚Ä¢ Inga loops
‚Ä¢ Mycket mer intuitivt ‚úÖ

ANDRA FLAGGOR ([F], [R], [E]):
‚Ä¢ Fungerar IDENTISKT i b√•da
‚Ä¢ Ingen skillnad
‚Ä¢ Ingen migrering beh√∂vs

F√ñRDELAR MED LITESPEEDS [L]:
‚ö° 5X snabbare rewrite-bearbetning
üõ°Ô∏è Inga rewrite-loops
üí° Mer intuitivt beteende
üöÄ Enklare att debugga

R√§tt svar: b. [L] (last) flaggan

Detta √§r den ENDA flaggan som beter sig annorlunda! üéØ`
  },
  {
    id: 10,
    question: "Vilket av f√∂ljande p√•st√•enden beskriver mest korrekt LSPHP:s st√∂d f√∂r Opcode Caching?",
    answers: [
      "LSPHP st√∂djer Opcode Caching inom alla tre suExec-l√§gena.",
      "LSPHP st√∂djer inte Opcode Caching.",
      "LSPHP st√∂djer Opcode Caching, men endast inom Daemon- och ProcessGroup-l√§gena.",
      "LSPHP st√∂djer Opcode Caching, men endast inom Worker- och ProcessGroup-l√§gena."
    ],
    correctAnswer: 2,
    explanation: "LSPHP st√∂djer Opcode Caching endast i Daemon-l√§ge och ProcessGroup-l√§ge. I Worker-l√§ge startas en ny PHP-process f√∂r varje request, vilket g√∂r att opcode cache inte kan delas mellan requests. Daemon och ProcessGroup h√•ller PHP-processer vid liv mellan requests, vilket m√∂jligg√∂r delning av opcode cache och dramatiskt b√§ttre prestanda.",
    example: `VERKLIGT SCENARIO - Opcode Caching i LSPHP:

üè¢ F√ñRETAG: "PerformanceHost Nordic" - Premiumwebbhotell
üìä UTMANING: Optimera PHP-prestanda f√∂r WordPress-kunder
üéØ L√ñSNING: F√∂rst√• och konfigurera r√§tt LSPHP-l√§ge f√∂r opcode caching

---

üî¨ VAD √ÑR OPCODE CACHE?

UTAN OPCODE CACHE:
1. PHP l√§ser index.php fr√•n disk
2. PHP parsar koden (omvandlar till tokens)
3. PHP kompilerar till opcodes (maskinkod)
4. PHP k√∂r opcodes
5. Request klar
6. N√ÑSTA REQUEST: Upprepa ALLT fr√•n steg 1! üò∞

MED OPCODE CACHE:
1. F√ñRSTA G√ÖNGEN:
   - PHP l√§ser index.php fr√•n disk
   - PHP parsar koden
   - PHP kompilerar till opcodes
   - PHP sparar opcodes i minnet (cache)
   - PHP k√∂r opcodes
2. N√ÑSTA REQUEST:
   - PHP laddar opcodes direkt fr√•n minnet! ‚ö°
   - Hoppar √∂ver steg 1-3 (50-80% snabbare!)

---

üìã LSPHP's TRE suExec-L√ÑGEN:

1Ô∏è‚É£ WORKER MODE (suEXEC_WorkerOnly):
‚Ä¢ Startar NY PHP-process f√∂r VARJE request
‚Ä¢ Process d√∂r efter request √§r klar
‚Ä¢ Ingen minnesdelning mellan requests
‚Ä¢ ‚ùå OPCODE CACHE FUNGERAR INTE!

2Ô∏è‚É£ DAEMON MODE (suEXEC_Daemon):
‚Ä¢ PHP-processer lever mellan requests
‚Ä¢ Samma process hanterar m√•nga requests
‚Ä¢ Minne delas inom samma anv√§ndare
‚Ä¢ ‚úÖ OPCODE CACHE FUNGERAR PERFEKT!

3Ô∏è‚É£ PROCESSGROUP MODE:
‚Ä¢ Hybrid mellan Worker och Daemon
‚Ä¢ Grupper av l√•nglivade processer
‚Ä¢ Minne delas inom processgruppen
‚Ä¢ ‚úÖ OPCODE CACHE FUNGERAR PERFEKT!

---

‚ùå WORKER MODE - Ingen Opcode Cache:

KONFIGURATION:
External App ‚Üí LSPHP
Run On Start Up: No (Disabled)
Max Idle Time: 10
Start Timeout: 30

BETEENDE:
Request 1 ‚Üí Startar Process A ‚Üí K√∂r PHP ‚Üí D√∂dar Process A
Request 2 ‚Üí Startar Process B ‚Üí K√∂r PHP ‚Üí D√∂dar Process B
Request 3 ‚Üí Startar Process C ‚Üí K√∂r PHP ‚Üí D√∂dar Process C

VARJE PROCESS kompilerar PHP fr√•n b√∂rjan! üò∞

PRESTANDA (WordPress):
‚Ä¢ Responstid: 350ms
‚Ä¢ Opcache hit rate: 0%
‚Ä¢ CPU-anv√§ndning: 65%
‚Ä¢ Memory: 50MB/request

---

‚úÖ DAEMON MODE - Perfekt Opcode Cache:

KONFIGURATION:
External App ‚Üí LSPHP
Run On Start Up: Yes (uds://tmp/lsphp.sock)
Max Idle Time: 300
Persistent Connection: Yes

BETEENDE:
Start ‚Üí Startar 5 l√•nglivade PHP-processer
Request 1 ‚Üí Process A ‚Üí Kompilerar PHP ‚Üí Cachar i minnet
Request 2 ‚Üí Process A ‚Üí L√§ser fr√•n cache! ‚ö°
Request 3 ‚Üí Process B ‚Üí L√§ser fr√•n cache! ‚ö°
Request 4 ‚Üí Process A ‚Üí L√§ser fr√•n cache! ‚ö°

PROCESSEN LEVER ‚Üí Cachen lever! üéâ

PRESTANDA (samma WordPress):
‚Ä¢ Responstid: 45ms (7X snabbare!)
‚Ä¢ Opcache hit rate: 98%
‚Ä¢ CPU-anv√§ndning: 12%
‚Ä¢ Memory: 120MB total (delat mellan requests)

---

‚úÖ PROCESSGROUP MODE - Balanserad Opcode Cache:

KONFIGURATION:
External App ‚Üí LSPHP
Run On Start Up: Yes
Max Connections: 50
Instances: 3

BETEENDE:
Start ‚Üí Startar 3 processgrupper
Grupp 1: 15 l√•nglivade processer
Grupp 2: 15 l√•nglivade processer
Grupp 3: 20 l√•nglivade processer

Requests f√∂rdelas mellan grupper
Opcache delas inom varje grupp!

PRESTANDA (samma WordPress):
‚Ä¢ Responstid: 50ms (6X snabbare!)
‚Ä¢ Opcache hit rate: 95%
‚Ä¢ CPU-anv√§ndning: 15%
‚Ä¢ Memory: 180MB total
‚Ä¢ B√§ttre skalning √§n Daemon f√∂r m√•nga anv√§ndare

---

üìä VERKLIGA BENCHMARKS:

TEST: WordPress + WooCommerce (500 produkter)
Samtidiga anv√§ndare: 100
Test-tid: 5 minuter

WORKER MODE (ingen opcode cache):
‚Ä¢ Requests/sekund: 45
‚Ä¢ Genomsnittlig responstid: 2,200ms
‚Ä¢ PHP CPU-tid: 85%
‚Ä¢ Opcache memory: 0 MB (anv√§nds inte)
‚Ä¢ RESULTAT: L√•ngsam och CPU-intensiv üò∞

DAEMON MODE (med opcode cache):
‚Ä¢ Requests/sekund: 380 (8X b√§ttre!)
‚Ä¢ Genomsnittlig responstid: 260ms (8X snabbare!)
‚Ä¢ PHP CPU-tid: 18%
‚Ä¢ Opcache memory: 128 MB
‚Ä¢ RESULTAT: Blixtsnabb! ‚ö°

PROCESSGROUP MODE (med opcode cache):
‚Ä¢ Requests/sekund: 340 (7X b√§ttre!)
‚Ä¢ Genomsnittlig responstid: 290ms (7X snabbare!)
‚Ä¢ PHP CPU-tid: 22%
‚Ä¢ Opcache memory: 256 MB (mer pga flera grupper)
‚Ä¢ RESULTAT: Mycket bra skalning! üöÄ

---

üîß PRAKTISK KONFIGURATION:

STEG 1 - Aktivera Opcache i php.ini:
[opcache]
opcache.enable=1
opcache.memory_consumption=128
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=10000
opcache.revalidate_freq=60
opcache.save_comments=1
opcache.fast_shutdown=1

STEG 2 - Konfigurera LSPHP f√∂r Daemon-l√§ge:
Server Configuration ‚Üí External App ‚Üí lsphp

Run On Start Up: Yes (Enabled)
Command: lsphp
Max Connections: 35
Environment: PHP_LSAPI_CHILDREN=10
Initial Request Timeout: 60
Retry Timeout: 0
Persistent Connection: Yes
Response Buffering: No

STEG 3 - Verifiera:
<?php
phpinfo();
// Leta efter "opcache.enable = On"
?>

ELLER:

<?php
$status = opcache_get_status();
echo "Opcache enabled: " . ($status['opcache_enabled'] ? 'Yes' : 'No');
echo "\nHit rate: " . round($status['opcache_statistics']['opcache_hit_rate'], 2) . "%";
?>

---

üí° VARF√ñR WORKER MODE INTE ST√ñDJER OPCACHE:

TEKNISK F√ñRKLARING:
‚Ä¢ Opcode cache lagras i PHP-processens minne
‚Ä¢ Worker mode startar NY process f√∂r VARJE request
‚Ä¢ N√§r processen d√∂r ‚Üí Minnet frig√∂rs ‚Üí Cachen f√∂rsvinner
‚Ä¢ N√§sta request = Tom cache igen
‚Ä¢ Det √§r som att starta om datorn efter varje klick!

ANALOGIER:
Worker mode = Nyanst√§lld som gl√∂mmer allt varje dag
Daemon mode = Erfaren anst√§lld som kommer ih√•g allt
ProcessGroup mode = Team av erfarna anst√§llda

---

üéØ N√ÑR ANV√ÑNDA VILKET L√ÑGE:

‚úÖ DAEMON MODE - B√§st f√∂r:
‚Ä¢ Dedikerade servrar
‚Ä¢ VPS med f√• anv√§ndare
‚Ä¢ Maximal prestanda
‚Ä¢ L√•g latency
‚Ä¢ Wordpress, Drupal, Joomla

‚úÖ PROCESSGROUP MODE - B√§st f√∂r:
‚Ä¢ Delad hosting med m√•nga anv√§ndare
‚Ä¢ Beh√∂ver isolera anv√§ndare
‚Ä¢ Balans mellan s√§kerhet och prestanda
‚Ä¢ Webbhotell med 100+ konton

‚ùå WORKER MODE - Anv√§nd endast f√∂r:
‚Ä¢ Extremt h√∂ga s√§kerhetskrav
‚Ä¢ Kan inte lita p√• anv√§ndarkod
‚Ä¢ Prestanda √§r sekund√§rt
‚Ä¢ Legacy-applikationer med minnel√§ckor

---

üí∞ EKONOMISK P√ÖVERKAN:

F√ñRETAG: E-handelssajt med 10,000 bes√∂kare/dag

WORKER MODE (ingen opcache):
‚Ä¢ Servrar beh√∂vda: 4 √ó $200/m√•n = $800/m√•n
‚Ä¢ CPU-anv√§ndning: 80-90%
‚Ä¢ Kund-upplevelse: Acceptabel (2s)

DAEMON MODE (med opcache):
‚Ä¢ Servrar beh√∂vda: 1 √ó $200/m√•n = $200/m√•n
‚Ä¢ LiteSpeed: $50/m√•n
‚Ä¢ Total: $250/m√•n
‚Ä¢ CPU-anv√§ndning: 15-25%
‚Ä¢ Kund-upplevelse: Utm√§rkt (0.3s)

BESPARING: $550/m√•n = $6,600/√•r! üí∞

Plus b√§ttre kundn√∂jdhet ‚Üí Mer f√∂rs√§ljning!

---

üèÜ SAMMANFATTNING:

LSPHP Opcode Caching-st√∂d:

‚ùå Worker Mode:
‚Ä¢ Opcode cache fungerar INTE
‚Ä¢ Processer lever f√∂r kort
‚Ä¢ L√•ngsam prestanda
‚Ä¢ Anv√§nd endast f√∂r s√§kerhet

‚úÖ Daemon Mode:
‚Ä¢ Opcode cache fungerar PERFEKT
‚Ä¢ Processer lever l√§nge
‚Ä¢ B√§sta prestanda
‚Ä¢ Rekommenderas f√∂r dedikerade servrar

‚úÖ ProcessGroup Mode:
‚Ä¢ Opcode cache fungerar PERFEKT
‚Ä¢ Balanserad approach
‚Ä¢ Bra prestanda + skalning
‚Ä¢ Rekommenderas f√∂r shared hosting

R√ÑTT SVAR: c. LSPHP st√∂djer Opcode Caching, men endast inom Daemon- och ProcessGroup-l√§gena.

PRESTANDAVINST med Opcode Caching:
‚ö° 5-10X snabbare PHP-exekvering
üí∞ 75% mindre servrar beh√∂vs
üöÄ 98% opcache hit rate m√∂jlig
üéØ Kritiskt f√∂r produktionsmilj√∂er!

Detta √§r SISTA fr√•gan! Nu har du ett komplett LiteSpeed-quiz! üéâ`
  }
]

export default function Quiz() {
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null)
  const [showResult, setShowResult] = useState(false)
  const [score, setScore] = useState(0)
  const [answered, setAnswered] = useState(false)
  const [showExplanation, setShowExplanation] = useState(false)
  const [userAnswers, setUserAnswers] = useState<number[]>([])
  const [showDetailedReport, setShowDetailedReport] = useState(false)

  const handleAnswerClick = (answerIndex: number) => {
    if (answered) return
    
    setSelectedAnswer(answerIndex)
    setAnswered(true)
    setShowExplanation(true)
    
    // Spara anv√§ndarens svar
    const newUserAnswers = [...userAnswers]
    newUserAnswers[currentQuestion] = answerIndex
    setUserAnswers(newUserAnswers)
    
    if (answerIndex === questions[currentQuestion].correctAnswer) {
      setScore(score + 1)
    }
  }

  const handleNext = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1)
      setSelectedAnswer(null)
      setAnswered(false)
      setShowExplanation(false)
    } else {
      setShowResult(true)
    }
  }

  const restartQuiz = () => {
    setCurrentQuestion(0)
    setScore(0)
    setSelectedAnswer(null)
    setShowResult(false)
    setAnswered(false)
    setShowExplanation(false)
    setUserAnswers([])
    setShowDetailedReport(false)
  }

  if (showResult) {
    if (showDetailedReport) {
      // Detaljerad rapport-vy
      return (
        <main className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 py-12 px-4">
          <div className="max-w-5xl mx-auto">
            <div className="bg-white/5 backdrop-blur-3xl rounded-3xl p-8 border border-white/10 shadow-2xl shadow-blue-500/10 mb-8">
              <h2 className="text-4xl font-bold text-white mb-4 text-center">Detaljerad Rapport üìä</h2>
              <p className="text-2xl text-blue-200 mb-2 text-center">
                Slutresultat: {score} av {questions.length} r√§tt ({Math.round((score / questions.length) * 100)}%)
              </p>
              <p className="text-lg text-blue-300 text-center mb-8">
                {score === questions.length && "üèÜ Perfekt! Du √§r en LiteSpeed-expert!"}
                {score >= questions.length * 0.7 && score < questions.length && "üëç Bra jobbat! Du har god kunskap om LiteSpeed!"}
                {score >= questions.length * 0.5 && score < questions.length * 0.7 && "üìö Inte illa! Du vet en del om LiteSpeed."}
                {score < questions.length * 0.5 && "üí™ Forts√§tt l√§ra dig om LiteSpeed!"}
              </p>
              <div className="flex gap-4 justify-center flex-wrap">
                <button
                  onClick={restartQuiz}
                  className="px-6 py-3 bg-gradient-to-r from-blue-600 to-cyan-500 rounded-xl font-bold text-white hover:shadow-lg hover:scale-105 transition-all"
                >
                  G√∂r om quiz
                </button>
                <button
                  onClick={() => setShowDetailedReport(false)}
                  className="px-6 py-3 bg-white/20 rounded-xl font-bold text-white hover:bg-white/30 transition-all"
                >
                  ‚Üê Tillbaka till sammanfattning
                </button>
                <Link
                  href="/"
                  className="px-6 py-3 bg-white/20 rounded-xl font-bold text-white hover:bg-white/30 transition-all"
                >
                  Tillbaka hem
                </Link>
              </div>
            </div>

            {/* Alla fr√•gor och svar */}
            <div className="space-y-6">
              {questions.map((q, qIndex) => {
                const userAnswer = userAnswers[qIndex]
                const isCorrect = userAnswer === q.correctAnswer
                return (
                  <div key={qIndex} className="bg-white/5 backdrop-blur-3xl rounded-3xl p-6 border border-white/10 shadow-xl shadow-blue-500/5">
                    <div className="flex items-start gap-4 mb-4">
                      <div className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center font-bold ${isCorrect ? 'bg-green-500' : 'bg-red-500'}`}>
                        {isCorrect ? '‚úì' : '‚úó'}
                      </div>
                      <div className="flex-1">
                        <h3 className="text-xl font-bold text-white mb-2">
                          Fr√•ga {qIndex + 1}: {q.question}
                        </h3>
                      </div>
                    </div>

                    <div className="space-y-2 ml-14">
                      {q.answers.map((answer, aIndex) => (
                        <div
                          key={aIndex}
                          className={`p-4 rounded-2xl backdrop-blur-xl shadow-lg ${
                            aIndex === q.correctAnswer
                              ? 'bg-green-500/15 border-2 border-green-400/50 shadow-green-500/20'
                              : userAnswer === aIndex
                              ? 'bg-red-500/15 border-2 border-red-400/50 shadow-red-500/20'
                              : 'bg-white/5 border border-white/10'
                          }`}
                        >
                          <div className="flex items-center gap-3">
                            <span className="font-bold text-white">
                              {String.fromCharCode(97 + aIndex)}.
                            </span>
                            <span className="text-white">{answer}</span>
                            {aIndex === q.correctAnswer && (
                              <span className="ml-auto text-green-400 font-bold">‚úì R√§tt svar</span>
                            )}
                            {userAnswer === aIndex && aIndex !== q.correctAnswer && (
                              <span className="ml-auto text-red-400 font-bold">‚úó Ditt svar</span>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>

                    <div className="ml-14 mt-4 p-4 bg-blue-500/10 backdrop-blur-xl rounded-2xl border border-blue-400/20 shadow-lg shadow-blue-500/10">
                      <p className="text-sm font-bold text-blue-300 mb-2">F√∂rklaring:</p>
                      <p className="text-sm text-blue-200">{q.explanation}</p>
                    </div>
                  </div>
                )
              })}
            </div>

            {/* Footer knappar */}
            <div className="mt-8 text-center">
              <div className="bg-white/5 backdrop-blur-3xl rounded-3xl p-6 border border-white/10 shadow-xl shadow-blue-500/5">
                <p className="text-white text-lg mb-4">
                  Slutresultat: {score} av {questions.length} r√§tt ({Math.round((score / questions.length) * 100)}%)
                </p>
                <div className="flex gap-4 justify-center flex-wrap">
                  <button
                    onClick={restartQuiz}
                    className="px-8 py-4 bg-gradient-to-r from-blue-600 to-cyan-500 rounded-xl font-bold text-white hover:shadow-lg hover:scale-105 transition-all"
                  >
                    G√∂r om quiz
                  </button>
                  <Link
                    href="/"
                    className="px-8 py-4 bg-white/20 rounded-xl font-bold text-white hover:bg-white/30 transition-all"
                  >
                    Tillbaka hem
                  </Link>
                </div>
              </div>
            </div>
          </div>
        </main>
      )
    }

    // Normal resultat-sammanfattning
    return (
      <main className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 flex items-center justify-center px-4">
        <div className="max-w-2xl w-full">
          <div className="bg-white/5 backdrop-blur-3xl rounded-3xl p-8 border border-white/10 shadow-2xl shadow-blue-500/10 text-center">
            <div className="mb-6">
              <svg className="w-20 h-20 mx-auto text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <h2 className="text-4xl font-bold text-white mb-4">Quiz slutf√∂rd! üéâ</h2>
            <p className="text-2xl text-blue-200 mb-8">
              Du fick {score} av {questions.length} r√§tt!
            </p>
            <div className="text-xl text-blue-300 mb-8">
              {score === questions.length && "Perfekt! Du √§r en LiteSpeed-expert! ‚ö°"}
              {score >= questions.length * 0.7 && score < questions.length && "Bra jobbat! Du har god kunskap om LiteSpeed! üëç"}
              {score >= questions.length * 0.5 && score < questions.length * 0.7 && "Inte illa! Du vet en del om LiteSpeed. üìö"}
              {score < questions.length * 0.5 && "Forts√§tt l√§ra dig om LiteSpeed! üí™"}
            </div>
            <div className="flex gap-4 justify-center flex-wrap">
              <button
                onClick={restartQuiz}
                className="px-8 py-4 bg-gradient-to-r from-blue-600 to-cyan-500 rounded-xl font-bold text-white hover:shadow-lg hover:scale-105 transition-all"
              >
                G√∂r om quiz
              </button>
              <button
                onClick={() => setShowDetailedReport(true)}
                className="px-8 py-4 bg-gradient-to-r from-green-600 to-emerald-500 rounded-xl font-bold text-white hover:shadow-lg hover:scale-105 transition-all"
              >
                Se hela resultatet üìä
              </button>
              <Link
                href="/"
                className="px-8 py-4 bg-white/20 rounded-xl font-bold text-white hover:bg-white/30 transition-all"
              >
                Tillbaka hem
              </Link>
            </div>
          </div>
        </div>
      </main>
    )
  }

  const question = questions[currentQuestion]

  return (
    <main className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 pb-12">
      <header className="p-6">
        <div className="flex items-center justify-between max-w-7xl mx-auto">
          <Link href="/" className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-gradient-to-br from-orange-500 to-red-600 rounded-lg flex items-center justify-center shadow-lg">
              <span className="text-white font-bold text-xl">cP</span>
            </div>
            <h1 className="text-white text-2xl font-bold tracking-tight">
              cPanel University
            </h1>
          </Link>
          <div className="text-blue-200 font-semibold">
            Fr√•ga {currentQuestion + 1} av {questions.length}
          </div>
        </div>
      </header>

      <div className="px-4 py-8">
        <div className="max-w-7xl mx-auto">
          <div className="mb-8">
            <div className="h-3 bg-white/20 rounded-full overflow-hidden">
              <div 
                className="h-full bg-gradient-to-r from-blue-600 to-cyan-500 transition-all duration-300"
                style={{ width: `${((currentQuestion + 1) / questions.length) * 100}%` }}
              />
            </div>
          </div>

          <div className="grid lg:grid-cols-2 gap-8">
            <div className="space-y-6">
              <div className="bg-white/5 backdrop-blur-3xl rounded-3xl p-8 border border-white/10 shadow-2xl shadow-blue-500/10">
                <h2 className="text-2xl font-bold text-white mb-8 leading-relaxed">
                  {question.question}
                </h2>

                <div className="space-y-4">
                  {question.answers.map((answer, index) => (
                    <button
                      key={index}
                      onClick={() => handleAnswerClick(index)}
                      disabled={answered}
                      className={`
                        w-full p-5 rounded-2xl font-semibold text-lg text-left transition-all backdrop-blur-xl
                        ${!answered && 'hover:scale-102 hover:shadow-2xl hover:shadow-blue-500/20'}
                        ${selectedAnswer === index && index === question.correctAnswer
                          ? 'bg-green-500/20 border-2 border-green-400/50 text-white shadow-lg shadow-green-500/20'
                          : selectedAnswer === index && index !== question.correctAnswer
                          ? 'bg-red-500/20 border-2 border-red-400/50 text-white shadow-lg shadow-red-500/20'
                          : answered && index === question.correctAnswer
                          ? 'bg-green-500/20 border-2 border-green-400/50 text-white shadow-lg shadow-green-500/20'
                          : 'bg-white/10 border-2 border-white/20 text-blue-100 hover:bg-white/20 hover:border-white/30'
                        }
                      `}
                    >
                      <div className="flex items-center">
                        <span className="w-8 h-8 rounded-full bg-white/20 flex items-center justify-center mr-4 font-bold text-sm shrink-0">
                          {String.fromCharCode(97 + index)}.
                        </span>
                        <span>{answer}</span>
                      </div>
                    </button>
                  ))}
                </div>
              </div>

              <div className="text-center">
                <div className="inline-block bg-white/5 backdrop-blur-2xl rounded-2xl px-6 py-3 border border-white/10 shadow-lg shadow-blue-500/10">
                  <span className="text-blue-200 text-lg font-semibold">
                    Po√§ng: {score} / {questions.length}
                  </span>
                </div>
              </div>
            </div>

            <div className="lg:sticky lg:top-6 lg:self-start">
              {showExplanation && (
                <div className="animate-fade-in space-y-6">
                  <div className={`
                    p-6 rounded-3xl border-2 text-center backdrop-blur-2xl shadow-xl
                    ${selectedAnswer === question.correctAnswer
                      ? 'bg-green-500/15 border-green-400/50 shadow-green-500/20'
                      : 'bg-red-500/15 border-red-400/50 shadow-red-500/20'
                    }
                  `}>
                    <div className="text-4xl mb-2">
                      {selectedAnswer === question.correctAnswer ? '‚úÖ' : '‚ùå'}
                    </div>
                    <div className="text-2xl font-bold text-white">
                      {selectedAnswer === question.correctAnswer ? 'R√§tt svar!' : 'Fel svar'}
                    </div>
                  </div>

                  <div className="bg-blue-500/10 backdrop-blur-3xl rounded-3xl p-8 border border-blue-400/20 shadow-xl shadow-blue-500/10">
                    <h3 className="text-xl font-bold text-white mb-4 flex items-center">
                      <svg className="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      F√∂rklaring
                    </h3>
                    <p className="text-blue-50 leading-relaxed text-base font-medium">
                      {question.explanation}
                    </p>
                  </div>

                  <div className="bg-purple-500/5 backdrop-blur-[48px] rounded-3xl p-8 max-h-[520px] overflow-y-auto border border-purple-300/10 shadow-2xl shadow-purple-500/20" style={{backdropFilter: 'blur(48px) saturate(180%)'}}>
                    <h3 className="text-xl font-bold text-white mb-4 flex items-center sticky top-0 bg-purple-500/10 backdrop-blur-3xl pb-4 -mx-8 px-8 pt-2 z-10 rounded-t-3xl border-b border-purple-300/10" style={{backdropFilter: 'blur(32px) saturate(180%)'}}>
                      <svg className="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                      </svg>
                      Verkligt Exempel
                    </h3>
                    <div className="example-text font-medium whitespace-pre-wrap">
                      {question.example}
                    </div>
                  </div>

                  <button
                    onClick={handleNext}
                    className="w-full px-8 py-4 bg-gradient-to-r from-blue-600 to-cyan-500 rounded-xl font-bold text-white text-xl hover:shadow-lg hover:scale-105 transition-all"
                  >
                    {currentQuestion < questions.length - 1 ? 'N√§sta fr√•ga ‚Üí' : 'Se resultat üéØ'}
                  </button>
                </div>
              )}

              {!showExplanation && (
                <div className="bg-white/3 backdrop-blur-3xl rounded-3xl p-12 border border-white/10 shadow-2xl shadow-purple-500/10 flex items-center justify-center min-h-[400px]">
                  <div className="text-center text-blue-300">
                    <svg className="w-16 h-16 mx-auto mb-4 opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <p className="text-lg">
                      V√§lj ett svar f√∂r att se<br/>detaljerad f√∂rklaring och exempel
                    </p>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </main>
  )
}
